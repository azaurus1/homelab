---
# For setting microk8s homepath storage path
#kind: StorageClass
#apiVersion: storage.k8s.io/v1
#metadata:
#  name: volume-hostpath
#provisioner: microk8s.io/hostpath
#reclaimPolicy: Delete
#parameters:
#  pvDir: /mnt/volume
#volumeBindingMode: Immediate
---
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: media
  annotations:
    argocd.argoproj.io/sync-options: Prune=false
spec:
  accessModes:
    - "ReadWriteMany" #"ReadWriteMany"
  resources:
    requests:
      storage: 300Gi #1Gi
  storageClassName: nfs-client
  #volumeName: jellyfin-media
---
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: downloads
  annotations:
    argocd.argoproj.io/sync-options: Prune=false
spec:
  accessModes:
    - "ReadWriteMany" #"ReadWriteMany"
  resources:
    requests:
      storage: 300Gi #1Gi
  storageClassName: nfs-client
  #volumeName: jellyfin-media
---
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: config-ombi
  annotations:
    argocd.argoproj.io/sync-options: Prune=false
spec:
  accessModes:
    - "ReadWriteMany" #"ReadWriteMany"
  resources:
    requests:
      storage: 3Gi #1Gi
  storageClassName: nfs-client
  #volumeName: jellyfin-media 
---
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: config-jellyfin
  annotations:
    argocd.argoproj.io/sync-options: Prune=false
spec:
  accessModes:
    - "ReadWriteMany" #"ReadWriteMany"
  resources:
    requests:
      storage: 3Gi #1Gi
  storageClassName: nfs-client
  #volumeName: jellyfin-media   
---
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: nextcloud-data
  annotations:
    argocd.argoproj.io/sync-options: Prune=false
spec:
  accessModes:
    - "ReadWriteMany" #"ReadWriteMany"
  resources:
    requests:
      storage: 300Gi #1Gi
  storageClassName: nfs-client
  #volumeName: jellyfin-media   
---
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: ghost-content
  annotations:
    argocd.argoproj.io/sync-options: Prune=false
spec:
  accessModes:
    - "ReadWriteMany" #"ReadWriteMany"
  resources:
    requests:
      storage: 15Gi #1Gi
  storageClassName: nfs-client 
---
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: books
  annotations:
    argocd.argoproj.io/sync-options: Prune=false
spec:
  accessModes:
    - "ReadWriteMany" #"ReadWriteMany"
  resources:
    requests:
      storage: 15Gi #1Gi
  storageClassName: nfs-client 
---
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: nextcloud-db
  annotations:
    argocd.argoproj.io/sync-options: Prune=false
spec:
  accessModes:
    - "ReadWriteMany" #"ReadWriteMany"
  resources:
    requests:
      storage: 400Gi #1Gi
  storageClassName: nfs-client 
---
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: config-prowlarr
  annotations:
    argocd.argoproj.io/sync-options: Prune=false
spec:
  accessModes:
    - "ReadWriteMany" #"ReadWriteMany"
  resources:
    requests:
      storage: 4Gi #1Gi
  storageClassName: nfs-client 
---
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: uptime-kuma-data
  annotations:
    argocd.argoproj.io/sync-options: Prune=false
spec:
  accessModes:
    - "ReadWriteMany" #"ReadWriteMany"
  resources:
    requests:
      storage: 4Gi #1Gi
  storageClassName: nfs-client 
---
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: qbittorrent-config
  annotations:
    argocd.argoproj.io/sync-options: Prune=false
spec:
  accessModes:
    - "ReadWriteMany" #"ReadWriteMany"
  resources:
    requests:
      storage: 50Mi #1Gi
  storageClassName: nfs-client 
---
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: element-config
  annotations:
    argocd.argoproj.io/sync-options: Prune=false
spec:
  accessModes:
    - "ReadWriteMany" #"ReadWriteMany"
  resources:
    requests:
      storage: 50Mi #1Gi
  storageClassName: nfs-client 
---
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: ghost-db
  annotations:
    argocd.argoproj.io/sync-options: Prune=false
spec:
  accessModes:
    - "ReadWriteMany" #"ReadWriteMany"
  resources:
    requests:
      storage: 8Gi #1Gi
  storageClassName: nfs-client 
---
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: heimdall-config
  annotations:
    argocd.argoproj.io/sync-options: Prune=false
spec:
  accessModes:
    - "ReadWriteMany" #"ReadWriteMany"
  resources:
    requests:
      storage: 2Gi #1Gi
  storageClassName: nfs-client 
---
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: kavita-config
  annotations:
    argocd.argoproj.io/sync-options: Prune=false
spec:
  accessModes:
    - "ReadWriteMany" #"ReadWriteMany"
  resources:
    requests:
      storage: 2Gi #1Gi
  storageClassName: nfs-client 
---
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: nzbget-config
  annotations:
    argocd.argoproj.io/sync-options: Prune=false
spec:
  accessModes:
    - "ReadWriteMany" #"ReadWriteMany"
  resources:
    requests:
      storage: 2Gi #1Gi
  storageClassName: nfs-client 
---
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: radarr-config
  annotations:
    argocd.argoproj.io/sync-options: Prune=false
spec:
  accessModes:
    - "ReadWriteMany" #"ReadWriteMany"
  resources:
    requests:
      storage: 2Gi #1Gi
  storageClassName: nfs-client 
---
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: readarr-config
  annotations:
    argocd.argoproj.io/sync-options: Prune=false
spec:
  accessModes:
    - "ReadWriteMany" #"ReadWriteMany"
  resources:
    requests:
      storage: 2Gi #1Gi
  storageClassName: nfs-client 
---
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: sonarr-config
  annotations:
    argocd.argoproj.io/sync-options: Prune=false
spec:
  accessModes:
    - "ReadWriteMany" #"ReadWriteMany"
  resources:
    requests:
      storage: 8Gi #1Gi
  storageClassName: nfs-client 
---
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: gotify-data
  annotations:
    argocd.argoproj.io/sync-options: Prune=false
spec:
  accessModes:
    - "ReadWriteMany" #"ReadWriteMany"
  resources:
    requests:
      storage: 8Gi #1Gi
  storageClassName: nfs-client 
---
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: ment-vault-data
  annotations:
    argocd.argoproj.io/sync-options: Prune=false
spec:
  accessModes:
    - "ReadWriteMany" #"ReadWriteMany"
  resources:
    requests:
      storage: 16Gi #1Gi
  storageClassName: nfs-client 
---
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: poste-data
  annotations:
    argocd.argoproj.io/sync-options: Prune=false
spec:
  accessModes:
    - "ReadWriteMany" #"ReadWriteMany"
  resources:
    requests:
      storage: 16Gi #1Gi
  storageClassName: nfs-client 
---
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: lldap-data
  annotations:
    argocd.argoproj.io/sync-options: Prune=false
spec:
  accessModes:
    - "ReadWriteMany" #"ReadWriteMany"
  resources:
    requests:
      storage: 3Gi #1Gi
  storageClassName: nfs-client 
---
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: frigate-data
  annotations:
    argocd.argoproj.io/sync-options: Prune=false
spec:
  accessModes:
    - "ReadWriteMany" #"ReadWriteMany"
  resources:
    requests:
      storage: 32Gi #1Gi
  storageClassName: nfs-client 
---
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: mautrix-meta-data
  annotations:
    argocd.argoproj.io/sync-options: Prune=false
spec:
  accessModes:
    - "ReadWriteMany" #"ReadWriteMany"
  resources:
    requests:
      storage: 1Gi #1Gi
  storageClassName: nfs-client 
---
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: wallabag-config
  annotations:
    argocd.argoproj.io/sync-options: Prune=false
spec:
  accessModes:
    - "ReadWriteMany" #"ReadWriteMany"
  resources:
    requests:
      storage: 1Gi #1Gi
  storageClassName: nfs-client
---
